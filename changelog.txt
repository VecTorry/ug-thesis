Webpage link:   https://ug-thesis-fb.web.app/
Firebase link:  https://console.firebase.google.com/project/ug-thesis-fb/overview


================================================================================


Version 1.1.2:


NOTE:
- N/A


CHANGES:
- Added notice to report tab about false data or ghost data with empty logs.



================================================================================


Version 1.1.1:


NOTE:
- Post defense update (Success with flying colors, by the way).


CHANGES:
- Restored write rules on Firebase:
    - script.js changes:
        - Restored 'window.updateSelectedCamera = function()' function.
        - Restored line 916 (formerly line 915).
- Temporary changes to index.html:
    - Restored line 55 (formerly line 52).


================================================================================


Version 1.1.0:


CHANGES:
- Added camera selection option.


NOTE:
- Quick minor update couple hours before system defense presentation without documentation.


================================================================================


Version 1.0.1:


CHANGES:
- Deployed to Firebase. Now accessible through internet link https://ug-thesis-fb.web.app/.
- Removed write rules on Firebase for the meantime (Change soon):
    - script.js changes:
        - Added line 118. Commented out line 117.
        - Added line 916. Commented out line 915.
- Temporary changes to index.html:
    - Added temporary parenthesis on line 52.

================================================================================


Version 0.9:


LATEST CHANGES:
- Updated node_modules folder library.
- Added dark mode option on UI.
- Added loading spinner UI on camera initialization.
- Added confidence level bar style.
- Fixed metadata classes.
- Added recommendations on report.
- Slightly fixed posture class colouring in generated report.
- Added option to either turn on or off database logging despite camera status.
- Added Firebase database logged postures count displaying in real time.


KNOWN ISSUES:
1) Pie chart of generated report not being coloured right.


NOTES:
- Three possible ways to make a recommendation report for post-session reports instead of just statistics of logged postures (Hardest to Easiest):
1: Make ourselves an AI model and train on huge amounts of data gathered either by us, online, or both.
2: Integrate ChatGPT into the system and let ChatGPT generate recommendation based on the logged postures.
3: A very simple if/else function like: "if good_posture (>50): live; elif bad_posture (>50): die;".


NEXT TASK(S):
- While on active session: A simple function of "if good_posture (>50): live; elif bad_posture (>50): die;" instead of a critical system. Eliminating professional or export advises. Employing common sense.


ROAD MAP:
1) [DONE] Verify use of Google's Teachable Machine model for use into web based system if feasible.

2) [DONE] System will be able to read captured test poses trained on TM (Teachable Machine) and display the detected pose live with confidence score for the user to see.

3) [DONE] System will log individual detected poses for 1 frame every second, then output the full list of all the poses into what ever is compatible for analyzation.

4) [DONE] The log & records will be summarized into a pop-up tab which could also be automatically or manually downloaded after user prompt.

5) [DONE] Deploy the system to be accessible through the use of internet instead of a local host with a local port.

6) [DONE] Add in extra CSS designs to make the system more visually appealing and user-friendly.

7) [IN PROGRESS INDEFINITELY] Maintain the deployed software and fix post-deployment bugs.


================================================================================


Version 0.8:


LATEST CHANGES:
- Updated node_modules folder library.
- Added dark mode option on UI.
- Added loading spinner UI on camera initialization.
- Added confidence level bar style.


PREVIOUS CHANGES:
- Added Google's Firebase for data management. May have much more potentials for the future.
- Detached JavaScript and CSS on different files: scripts.js and styles.css.
- Initialized "npm init -y" on bash for local host then "npm install firebase"
@@ -13,15 +20,15 @@ LATEST CHANGES:
- Added "Generate Report" button and function to print out logged poses in PDF form from Firebase database.
- Added "Clear Logs" button and function to clear logged postures on Firebase database.
- NEW pose labels: Neutral, Cross Legged, Slouched Forward, Side Slouch, Slouched Backward, Head Dropping (changed files:metadata.json, model.json, & weights.bin)
- Flexible software: Able to feed on imported TensorFlow.js without software changes (Potential feature where user can import their own models).
- Removed requirements.txt file.
- Added preview of generated report before downloading as pdf file.
- Added error handling and web browser logging for easier debugging.
- Slightly improved report UI for readability


KNOWN ISSUES:
1) Pie chart of generated report not coloured right and automatically.


NOTES:
@@ -31,8 +38,8 @@ NOTES:
3: A very simple if/else function like: "if good_posture (>50): live; elif bad_posture (>50): die;".


NEXT TASK(S):
- While on active session: A simple function of "if good_posture (>50): live; elif bad_posture (>50): die;" instead of a critical system. Eliminating professional or export advises. Employing common sense.


ROAD MAP:
@@ -42,10 +49,10 @@ ROAD MAP:

3) [DONE] System will log individual detected poses for 1 frame every second, then output the full list of all the poses into what ever is compatible for analyzation.

4) [IN PROGRESS] The log & records will be summarized into a pop-up tab which could also be automatically or manually downloaded after user prompt.

5) [DONE] Deploy the system to be accessible through the use of internet instead of a local host with a local port.

6) [IN PROGRESS] Add in extra CSS designs to make the system more visually appealing and user-friendly.

7) [IN PROGRESS INDEFINITELY] Maintain the deployed software and fix post-deployment bugs.


================================================================================


Version 0.7:


Firebase link: https://console.firebase.google.com/project/ug-thesis-fb/overview


LATEST CHANGES:

- Added Google's Firebase for data management. May have much more potentials for the future.
- Detached JavaScript and CSS on different files: scripts.js and styles.css.
- Initialized "npm init -y" on bash for local host then "npm install firebase"
- Several thousand changes in node_modules folder due to the previous action listed.
- Fixed "Close Camera" button and function to properly stop camera feedback and logging in Firebase.
- Added "Generate Report" button and function to print out logged poses in PDF form from Firebase database.
- Added "Clear Logs" button and function to clear logged postures on Firebase database.
- NEW pose labels: Neutral, Cross Legged, Slouched Forward, Side Slouch, Slouched Backward, Head Dropping (changed files:metadata.json, model.json, & weights.bin)
- Flexible software: Able to feed on imported TensorFlow.js without software changes (Potential feature where user can import their own models).
- Removed requirements.txt file.
- Added preview of generated report before downloading as pdf file.
- Added error handling and web browser logging for easier debugging.
- Slightly improved report UI for readability


KNOWN ISSUES:
- None, will make issues soon.


NOTES:

- Three possible ways to make a recommendation report for post-session reports instead of just statistics of logged postures (Hardest to Easiest): 1: Make ourselves an AI model and train on huge amounts of data gathered either by us, online, or both. 2: Integrate ChatGPT into the system and let ChatGPT generate recommendation based on the logged postures. 3: A very simple if/else function like: "if good_posture (>50): live; elif bad_posture (>50): die;".
NEXT TASK:
- The log will be analyzed by another AI which would summarize into a detailed reported if a user has had a bad or good posture, and will provide recommendations for improvement.


ROAD MAP:

[DONE] Verify use of Google's Teachable Machine model for use into web based system if feasible.

[DONE] System will be able to read captured test poses trained on TM (Teachable Machine) and display the detected pose live with confidence score for the user to see.

[DONE] System will log individual detected poses for 1 frame every second, then output the full list of all the poses into what ever is compatible for analyzation.

[IN PROGRESS] The log will be analyzed by another AI or a simple if-else function, which would be included in the report if a user has had a bad or good posture, and will provide recommendations for improvement.

[IN PROGRESS] Deploy the system to be accessible through the use of internet instead of a local host with a local port.

Add in extra CSS designs to make the system more visually appealing and user-friendly.

Maintain the deployed software and fix post-deployment bugs.


================================================================================


Version 0.6:


Firebase link: https://console.firebase.google.com/project/ug-thesis-fb/overview


LATEST CHANGES:
- Added Google's Firebase for data management. May have much more potentials for the future.
- Detached JavaScript and CSS on different files: scripts.js and styles.css.
- Initialized "npm init -y" on bash for local host then "npm install firebase"
- Several thousand changes in node_modules folder due to the previous action listed.
- Fixed "Close Camera" button and function to properly stop camera feedback and logging in Firebase.
- Added "Generate Report" button and function to print out logged poses in PDF form from Firebase database.
- Added "Clear Logs" button and function to clear logged postures on Firebase database.


KNOWN ISSUES:
1) None, will make issues soon.


NOTES:
- Three possible ways to make a recommendation report for post-session reports instead of just statistics of logged postures (Hardest to Easiest):
1: Make ourselves an AI model and train on huge amounts of data gathered either by us, online, or both.
2: Integrate ChatGPT into the system and let ChatGPT generate recommendation based on the logged postures.
3: A very simple if/else function like: "if good_posture (>50): live; elif bad_posture (>50): die;".


NEXT TASK:
- The log will be analyzed by another AI which would summarize into a detailed reported if a user has had a bad or good posture, and will provide recommendations for improvement.


ROAD MAP:
1) [DONE] Verify use of Google's Teachable Machine model for use into web based system if feasible.

2) [DONE] System will be able to read captured test poses trained on TM (Teachable Machine) and display the detected pose live with confidence score for the user to see.

3) [DONE] System will log individual detected poses for 1 frame every second, then output the full list of all the poses into what ever is compatible for analyzation.

4) [IN PROGRESS] The log will be analyzed by another AI or a simple function, which would be included in the report if a user has had a bad or good posture, and will provide recommendations for improvement.

5) [IN PROGRESS] Deploy the system to be accessible through the use of internet instead of a local host with a local port.

6) Add in extra CSS designs to make the system more visually appealing and user-friendly.


================================================================================


Version 0.5:


Bugfixes:
- Fixed _Media typo
- "URL" on *URL + "model.json"* removed
- webcam "getVideo" line corrected


Stability:
- Presumably fixed element memory leak related to camera.


UI:
- Smaller webcam display (will soon be changed to a more suitable size).
- Offset webcam display (will soon be change to a more suitable position).
- Removed "Predicted pose" UI below the webcam feed.
- Confidence scores now shows correctly.
- Pose landmarks and joints are now showing.


Model:
- Model changed from "Standing" and "T-Pose" to: "Standing" and "Running" (Model confidently reads the "Running" pose when user is "running" on their left side, but struggles when "running" facing the right).
- Model is now being read properly.
- Model now works together with the confidence scores, pose landmarks, and joints display on the webcam feed.


NEXT TASK:
- Log predicted poses: capture 1 frame every second, then log the different postures that were recognized.

Road Map:
1) [DONE] Verify use of Google's Teachable Machine model for use into web based system if feasible.

2) [DONE] System will be able to read/predict captured test poses trained on TM (Teachable Machine) and display the detected pose live with confidence score for the user to see.

3) [IN PROGRESS] System will log individual detected poses for 1 frame every second, then output the full list of all the poses into what ever is compatible for analyzation.

4) The log will be analyzed by another AI which would summarize into a detailed reported if a user has had a bad or good posture, and will provide recommendations for improvement.


================================================================================


Version 0.01:


- Original Teachable Machine code snippet integrated.


================================================================================


Start of change logging: After full refactor and Original Teachable Machine code snippet integrated. Version 0